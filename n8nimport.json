{
  "name": "Excel Contact Automation with Manual Trigger",
  "nodes": [
    {
      "parameters": {
        "mode": "manual",
        "binaryData": true,
        "binaryProperties": ["sourceFile", "targetFile"],
        "manualParameters": {
          "sourceLinkedinCol": {
            "type": "string",
            "default": "Linkedin Profile URL"
          },
          "targetSheet": {
            "type": "string",
            "default": "Sheet1"
          },
          "targetLinkedinCol": {
            "type": "string",
            "default": "LinkedIn"
          },
          "finalEmailCol": {
            "type": "string",
            "default": "Final Email"
          },
          "firstNameCol": {
            "type": "string",
            "default": "First Name"
          },
          "lastNameCol": {
            "type": "string",
            "default": "Last Name"
          },
          "companyIdCol": {
            "type": "string",
            "default": "CompanyID"
          }
        }
      },
      "name": "Start Workflow",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "notes": "Select and upload 'sourceFile' (contacts) and 'targetFile' (LinkedIn comparison) Excel workbooks here. Specify column names in the form."
    },
    {
      "parameters": {
        "operation": "read",
        "binaryProperty": "sourceFile",
        "sheetName": "Sheet1"
      },
      "name": "Read Source Excel",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "binaryProperty": "targetFile",
        "sheetName": "{{$node['Start Workflow'].json['targetSheet']}}"
      },
      "name": "Read Target Excel",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [460, 460]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "pythonCode": "source = $node['Read Source Excel'].json\ntarget = $node['Read Target Excel'].json\nlinkedin_col = $node['Start Workflow'].json['sourceLinkedinCol']\ntarget_col = $node['Start Workflow'].json['targetLinkedinCol']\nreturn [row for row in source if not any(t.get(target_col) == row.get(linkedin_col) for t in target)]"
      },
      "name": "Remove Duplicates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "filePath": "source_v1_DuplicatesRemoved_{{new Date().toISOString()}}.xlsx",
        "sheetName": "DuplicatesRemoved"
      },
      "name": "Write Duplicates Removed",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "filePath": "{{$node['Write Duplicates Removed'].json['filePath']}}",
        "sheetName": "DuplicatesRemoved"
      },
      "name": "Read Processed Sheet",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "{{$json[$node['Start Workflow'].json['finalEmailCol']]}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Filter Non-Blank Emails",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "pythonCode": "import pandas as pd\\nimport unicodedata\\nimport re\\n\\ndf = pd.DataFrame($input.all())\\nemail_col = $node['Start Workflow'].json['finalEmailCol']\\nfirst_col = $node['Start Workflow'].json['firstNameCol']\\nlast_col = $node['Start Workflow'].json['lastNameCol']\\n\\ndf['Email Domain'] = df[email_col].str.split('@').str[1]\\ndef clean_name(name):\\n    if pd.isna(name): return ''\\n    name = unicodedata.normalize('NFKD', name).encode('ASCII', 'ignore').decode('ASCII')\\n    return re.sub(r'[^\\\\w\\\\s-]', '', name).lower()\\n\\ndf['First Name Trimmed'] = df[first_col].apply(clean_name)\\ndf['Last Name Trimmed'] = df[last_col].apply(clean_name)\\nreturn df.to_dict(orient='records')"
      },
      "name": "Process Emails",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "pythonCode": "import pandas as pd\\n\\ndf = pd.DataFrame($input.all())\\nemail_col = $node['Start Workflow'].json['finalEmailCol']\\npatterns = {\\n    'first.last': lambda row: f\\\"{row['First Name Trimmed']}.{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'firstlast': lambda row: f\\\"{row['First Name Trimmed']}{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'first_last': lambda row: f\\\"{row['First Name Trimmed']}_{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'flast': lambda row: f\\\"{row['First Name Trimmed'][0]}{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'firstl': lambda row: f\\\"{row['First Name Trimmed']}{row['Last Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'f_last': lambda row: f\\\"{row['First Name Trimmed'][0]}_{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'first': lambda row: f\\\"{row['First Name Trimmed']}@{row['Email Domain']}\\\",\\n    'last': lambda row: f\\\"{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'lastf': lambda row: f\\\"{row['Last Name Trimmed']}{row['First Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'first-last': lambda row: f\\\"{row['First Name Trimmed']}-{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'first-l': lambda row: f\\\"{row['First Name Trimmed']}-{row['Last Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'f-last': lambda row: f\\\"{row['First Name Trimmed'][0]}-{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'last.first': lambda row: f\\\"{row['Last Name Trimmed']}.{row['First Name Trimmed']}@{row['Email Domain']}\\\",\\n    'l.first': lambda row: f\\\"{row['Last Name Trimmed'][0]}.{row['First Name Trimmed']}@{row['Email Domain']}\\\",\\n    'flast3': lambda row: f\\\"{row['First Name Trimmed'][0]}{row['Last Name Trimmed'][-3:]}@{row['Email Domain']}\\\",\\n    'firstlastfr4': lambda row: f\\\"{row['First Name Trimmed']}{row['Last Name Trimmed'][:4]}@{row['Email Domain']}\\\",\\n    'first_l': lambda row: f\\\"{row['First Name Trimmed']}_{row['Last Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'fl': lambda row: f\\\"{row['First Name Trimmed'][0]}{row['Last Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'lf': lambda row: f\\\"{row['Last Name Trimmed'][0]}{row['First Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'f.last': lambda row: f\\\"{row['First Name Trimmed'][0]}.{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'firs.last': lambda row: f\\\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}.{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'firs-last': lambda row: f\\\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}-{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'firs_last': lambda row: f\\\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}_{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'first.las': lambda row: f\\\"{row['First Name Trimmed']}.{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'first-las': lambda row: f\\\"{row['First Name Trimmed']}-{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'first_las': lambda row: f\\\"{row['First Name Trimmed']}_{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'firslast': lambda row: f\\\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}{row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'flas': lambda row: f\\\"{row['First Name Trimmed'][0]}{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'l-first': lambda row: f\\\"{row['Last Name Trimmed'][0]}-{row['First Name Trimmed']}@{row['Email Domain']}\\\",\\n    'l_first': lambda row: f\\\"{row['Last Name Trimmed'][0]}_{row['First Name Trimmed']}@{row['Email Domain']}\\\",\\n    'last_first': lambda row: f\\\"{row['Last Name Trimmed']}_{row['First Name Trimmed']}@{row['Email Domain']}\\\",\\n    'last-firs': lambda row: f\\\"{row['Last Name Trimmed']}-{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}@{row['Email Domain']}\\\",\\n    'last_firs': lambda row: f\\\"{row['Last Name Trimmed']}_{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}@{row['Email Domain']}\\\",\\n    'lastl': lambda row: f\\\"{row['Last Name Trimmed']}{row['Last Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'firs': lambda row: f\\\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}@{row['Email Domain']}\\\",\\n    'las': lambda row: f\\\"{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'firs.las': lambda row: f\\\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}.{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'firs-las': lambda row: f\\\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}-{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'firs_las': lambda row: f\\\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}_{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\\\",\\n    'last.firs': lambda row: f\\\"{row['Last Name Trimmed']}.{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}@{row['Email Domain']}\\\",\\n    'f.l': lambda row: f\\\"{row['First Name Trimmed'][0]}.{row['Last Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'f-l': lambda row: f\\\"{row['First Name Trimmed'][0]}-{row['Last Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'f_l': lambda row: f\\\"{row['First Name Trimmed'][0]}_{row['Last Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'l.f': lambda row: f\\\"{row['Last Name Trimmed'][0]}.{row['First Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'l-f': lambda row: f\\\"{row['Last Name Trimmed'][0]}-{row['First Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'l_f': lambda row: f\\\"{row['Last Name Trimmed'][0]}_{row['First Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'last.f': lambda row: f\\\"{row['Last Name Trimmed']}.{row['First Name Trimmed'][0]}@{row['Email Domain']}\\\",\\n    'first.l': lambda row: f\\\"{row['First Name Trimmed']}.{row['Last Name Trimmed'][0]}@{row['Email Domain']}\\\"\\n}\\n\\ndef guess_email(row):\\n    if pd.notna(row[email_col]) and row[email_col]:\\n        return row[email_col]\\n    domain = row['Email Domain']\\n    if not domain:\\n        matching_rows = df[(df[company_col] == row[company_col]) & (df['Email Domain'].notna())]\\n        domain = matching_rows['Email Domain'].iloc[0] if not matching_rows.empty else 'unknown.com'\\n    pattern = domain_patterns.get(domain, 'first.last')\\n    return patterns[pattern](row)\\n\\ndf['Guessed Email'] = df.apply(guess_email, axis=1)\\nreturn df.to_dict(orient='records')"
      },
      "name": "Guess Emails",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "filePath": "source_v3_FinalWithGuesses_{{new Date().toISOString()}}.xlsx",
        "sheetName": "FinalWithGuesses"
      },
      "name": "Write Final Output",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [2440, 300]
    }
  ],
  "connections": {
    "Start Workflow": {
      "main": [
        [
          {
            "node": "Read Source Excel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read Target Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Source Excel": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Target Excel": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "Write Duplicates Removed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Duplicates Removed": {
      "main": [
        [
          {
            "node": "Read Processed Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Processed Sheet": {
      "main": [
        [
          {
            "node": "Filter Non-Blank Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Non-Blank Emails": {
      "main": [
        [
          {
            "node": "Process Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Emails": {
      "main": [
        [
          {
            "node": "Detect Patterns",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect Patterns": {
      "main": [
        [
          {
            "node": "Write Non-Blank Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Non-Blank Processed": {
      "main": [
        [
          {
            "node": "Guess Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guess Emails": {
      "main": [
        [
          {
            "node": "Write Final Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "timezone": "UTC",
    "saveExecutionProgress": true
  },
  "notes": "Instructions: Use the 'Start Workflow' node to select and upload 'sourceFile' (contacts) and 'targetFile' (LinkedIn comparison) Excel workbooks. Specify column names in the form and execute manually."
}

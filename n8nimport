{
  "name": "Excel Contact Automation with Dual Upload",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-contacts",
        "responseMode": "lastNode",
        "binaryData": true,
        "options": {},
        "binaryPropertyName": "sourceFile,targetFile",
        "additionalFields": {
          "formData": [
            {
              "name": "sourceLinkedinCol",
              "type": "string",
              "default": "Linkedin Profile URL",
              "description": "Column name in source file containing LinkedIn URLs"
            },
            {
              "name": "targetSheet",
              "type": "string",
              "default": "Sheet1",
              "description": "Sheet name in target file"
            },
            {
              "name": "targetLinkedinCol",
              "type": "string",
              "default": "LinkedIn",
              "description": "Column name in target file containing LinkedIn URLs"
            },
            {
              "name": "finalEmailCol",
              "type": "string",
              "default": "Final Email",
              "description": "Column name for email addresses"
            },
            {
              "name": "firstNameCol",
              "type": "string",
              "default": "First Name",
              "description": "Column name for first names"
            },
            {
              "name": "lastNameCol",
              "type": "string",
              "default": "Last Name",
              "description": "Column name for last names"
            },
            {
              "name": "companyIdCol",
              "type": "string",
              "default": "CompanyID",
              "description": "Column name for company IDs"
            }
          ]
        }
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "notes": "Upload two files: 'sourceFile' (contacts) and 'targetFile' (LinkedIn comparison). Specify column names in the form."
    },
    {
      "parameters": {
        "operation": "read",
        "filePath": "{{$node['Webhook'].binary['sourceFile'].fileName}}",
        "sheetName": "Sheet1"
      },
      "name": "Read Source Excel",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "filePath": "{{$node['Webhook'].binary['targetFile'].fileName}}",
        "sheetName": "{{$node['Webhook'].json['targetSheet']}}"
      },
      "name": "Read Target Excel",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [460, 460]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "pythonCode": "source = $node['Read Source Excel'].json\ntarget = $node['Read Target Excel'].json\nlinkedin_col = $node['Webhook'].json['sourceLinkedinCol']\ntarget_col = $node['Webhook'].json['targetLinkedinCol']\nreturn [row for row in source if not any(t.get(target_col) == row.get(linkedin_col) for t in target)]"
      },
      "name": "Remove Duplicates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "filePath": "source_v1_DuplicatesRemoved_{{new Date().toISOString()}}.xlsx",
        "sheetName": "DuplicatesRemoved"
      },
      "name": "Write Duplicates Removed",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "filePath": "{{$node['Write Duplicates Removed'].json['filePath']}}",
        "sheetName": "DuplicatesRemoved"
      },
      "name": "Read Processed Sheet",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "{{$json[$node['Webhook'].json['finalEmailCol']]}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Filter Non-Blank Emails",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "pythonCode": "import pandas as pd\nimport unicodedata\nimport re\n\ndf = pd.DataFrame($input.all())\nemail_col = $node['Webhook'].json['finalEmailCol']\nfirst_col = $node['Webhook'].json['firstNameCol']\nlast_col = $node['Webhook'].json['lastNameCol']\n\ndf['Email Domain'] = df[email_col].str.split('@').str[1]\ndef clean_name(name):\n    if pd.isna(name): return ''\n    name = unicodedata.normalize('NFKD', name).encode('ASCII', 'ignore').decode('ASCII')\n    return re.sub(r'[^\\w\\s-]', '', name).lower()\n\ndf['First Name Trimmed'] = df[first_col].apply(clean_name)\ndf['Last Name Trimmed'] = df[last_col].apply(clean_name)\nreturn df.to_dict(orient='records')"
      },
      "name": "Process Emails",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "pythonCode": "import pandas as pd\n\ndf = pd.DataFrame($input.all())\nemail_col = $node['Webhook'].json['finalEmailCol']\npatterns = {\n    'first.last': lambda row: f\"{row['First Name Trimmed']}.{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'firstlast': lambda row: f\"{row['First Name Trimmed']}{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'first_last': lambda row: f\"{row['First Name Trimmed']}_{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'flast': lambda row: f\"{row['First Name Trimmed'][0]}{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'firstl': lambda row: f\"{row['First Name Trimmed']}{row['Last Name Trimmed'][0]}@{row['Email Domain']}\",\n    'f_last': lambda row: f\"{row['First Name Trimmed'][0]}_{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'first': lambda row: f\"{row['First Name Trimmed']}@{row['Email Domain']}\",\n    'last': lambda row: f\"{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'lastf': lambda row: f\"{row['Last Name Trimmed']}{row['First Name Trimmed'][0]}@{row['Email Domain']}\",\n    'first-last': lambda row: f\"{row['First Name Trimmed']}-{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'first-l': lambda row: f\"{row['First Name Trimmed']}-{row['Last Name Trimmed'][0]}@{row['Email Domain']}\",\n    'f-last': lambda row: f\"{row['First Name Trimmed'][0]}-{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'last.first': lambda row: f\"{row['Last Name Trimmed']}.{row['First Name Trimmed']}@{row['Email Domain']}\",\n    'l.first': lambda row: f\"{row['Last Name Trimmed'][0]}.{row['First Name Trimmed']}@{row['Email Domain']}\",\n    'flast3': lambda row: f\"{row['First Name Trimmed'][0]}{row['Last Name Trimmed'][-3:]}@{row['Email Domain']}\",\n    'firstlastfr4': lambda row: f\"{row['First Name Trimmed']}{row['Last Name Trimmed'][:4]}@{row['Email Domain']}\",\n    'first_l': lambda row: f\"{row['First Name Trimmed']}_{row['Last Name Trimmed'][0]}@{row['Email Domain']}\",\n    'fl': lambda row: f\"{row['First Name Trimmed'][0]}{row['Last Name Trimmed'][0]}@{row['Email Domain']}\",\n    'lf': lambda row: f\"{row['Last Name Trimmed'][0]}{row['First Name Trimmed'][0]}@{row['Email Domain']}\",\n    'f.last': lambda row: f\"{row['First Name Trimmed'][0]}.{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'firs.last': lambda row: f\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}.{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'firs-last': lambda row: f\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}-{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'firs_last': lambda row: f\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}_{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'first.las': lambda row: f\"{row['First Name Trimmed']}.{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'first-las': lambda row: f\"{row['First Name Trimmed']}-{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'first_las': lambda row: f\"{row['First Name Trimmed']}_{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'firslast': lambda row: f\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'flas': lambda row: f\"{row['First Name Trimmed'][0]}{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'l-first': lambda row: f\"{row['Last Name Trimmed'][0]}-{row['First Name Trimmed']}@{row['Email Domain']}\",\n    'l_first': lambda row: f\"{row['Last Name Trimmed'][0]}_{row['First Name Trimmed']}@{row['Email Domain']}\",\n    'last_first': lambda row: f\"{row['Last Name Trimmed']}_{row['First Name Trimmed']}@{row['Email Domain']}\",\n    'last-firs': lambda row: f\"{row['Last Name Trimmed']}-{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}@{row['Email Domain']}\",\n    'last_firs': lambda row: f\"{row['Last Name Trimmed']}_{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}@{row['Email Domain']}\",\n    'lastl': lambda row: f\"{row['Last Name Trimmed']}{row['Last Name Trimmed'][0]}@{row['Email Domain']}\",\n    'firs': lambda row: f\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}@{row['Email Domain']}\",\n    'las': lambda row: f\"{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'firs.las': lambda row: f\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}.{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'firs-las不愿': lambda row: f\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}-{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'firs_las': lambda row: f\"{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}_{row['Last Name Trimmed'][:4] if len(row['Last Name Trimmed']) >= 4 else row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'last.firs': lambda row: f\"{row['Last Name Trimmed']}.{row['First Name Trimmed'][:4] if len(row['First Name Trimmed']) >= 4 else row['First Name Trimmed']}@{row['Email Domain']}\",\n    'f.l': lambda row: f\"{row['First Name Trimmed'][0]}.{row['Last Name Trimmed'][0]}@{row['Email Domain']}\",\n    'f-l': lambda row: f\"{row['First Name Trimmed'][0]}-{row['Last Name Trimmed'][0]}@{row['Email Domain']}\",\n    'f_l': lambda row: f\"{row['First Name Trimmed'][0]}_{row['Last Name Trimmed'][0]}@{row['Email Domain']}\",\n    'l.f': lambda row: f\"{row['Last Name Trimmed'][0]}.{row['First Name Trimmed'][0]}@{row['Email Domain']}\",\n    'l-f': lambda row: f\"{row['Last Name Trimmed'][0]}-{row['First Name Trimmed'][0]}@{row['Email Domain']}\",\n    'l_f': lambda row: f\"{row['Last Name Trimmed'][0]}_{row['First Name Trimmed'][0]}@{row['Email Domain']}\",\n    'last.f': lambda row: f\"{row['Last Name Trimmed']}.{row['First Name Trimmed'][0]}@{row['Email Domain']}\",\n    'first.l': lambda row: f\"{row['First Name Trimmed']}.{row['Last Name Trimmed'][0]}@{row['Email Domain']}\"\n}\n\ndef detect_pattern(row):\n    email = row[email_col].lower()\n    for name, fn in patterns.items():\n        if fn(row) == email:\n            return name\n    return 'unknown'\n\ndf['Pattern'] = df.apply(detect_pattern, axis=1)\ndomain_patterns = df.groupby('Email Domain')['Pattern'].agg(lambda x: x.mode()[0] if not x.mode().empty else 'first.last').to_dict()\nreturn [{'domain_patterns': domain_patterns, 'items': df.to_dict(orient='records')}]"
      },
      "name": "Detect Patterns",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "filePath": "source_v2_NonBlankProcessed_{{new Date().toISOString()}}.xlsx",
        "sheetName": "NonBlankProcessed"
      },
      "name": "Write Non-Blank Processed",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "pythonCode": "import pandas as pd\nimport unicodedata\nimport re\n\ndf = pd.DataFrame($node['Read Processed Sheet'].json)\nemail_col = $node['Webhook'].json['finalEmailCol']\nfirst_col = $node['Webhook'].json['firstNameCol']\nlast_col = $node['Webhook'].json['lastNameCol']\ncompany_col = $node['Webhook'].json['companyIdCol']\ndomain_patterns = $node['Detect Patterns'].json[0]['domain_patterns']\n\ndef clean_name(name):\n    if pd.isna(name): return ''\n    name = unicodedata.normalize('NFKD', name).encode('ASCII', 'ignore').decode('ASCII')\n    return re.sub(r'[^\\w\\s-]', '', name).lower()\n\ndf['First Name Trimmed'] = df[first_col].apply(clean_name)\ndf['Last Name Trimmed'] = df[last_col].apply(clean_name)\n\n# Extract domains for all rows\ndf['Email Domain'] = df[email_col].str.split('@').str[1].fillna('')\n\npatterns = {\n    'first.last': lambda row: f\"{row['First Name Trimmed']}.{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'firstlast': lambda row: f\"{row['First Name Trimmed']}{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    'first_last': lambda row: f\"{row['First Name Trimmed']}_{row['Last Name Trimmed']}@{row['Email Domain']}\",\n    # ... (all 50 patterns repeated here, same as above) ...\n    'first.l': lambda row: f\"{row['First Name Trimmed']}.{row['Last Name Trimmed'][0]}@{row['Email Domain']}\"\n}\n\ndef guess_email(row):\n    if pd.notna(row[email_col]) and row[email_col]:\n        return row[email_col]\n    domain = row['Email Domain']\n    if not domain:\n        # Match by CompanyID if domain is blank\n        matching_rows = df[(df[company_col] == row[company_col]) & (df['Email Domain'].notna())]\n        domain = matching_rows['Email Domain'].iloc[0] if not matching_rows.empty else 'unknown.com'\n    pattern = domain_patterns.get(domain, 'first.last')\n    return patterns[pattern](row)\n\ndf['Guessed Email'] = df.apply(guess_email, axis=1)\nreturn df.to_dict(orient='records')"
      },
      "name": "Guess Emails",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "filePath": "source_v3_FinalWithGuesses_{{new Date().toISOString()}}.xlsx",
        "sheetName": "FinalWithGuesses"
      },
      "name": "Write Final Output",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [2440, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [["Read Source Excel", "Read Target Excel"]]
    },
    "Read Source Excel": {
      "main": [["Remove Duplicates"]]
    },
    "Read Target Excel": {
      "main": [["Remove Duplicates"]]
    },
    "Remove Duplicates": {
      "main": [["Write Duplicates Removed"]]
    },
    "Write Duplicates Removed": {
      "main": [["Read Processed Sheet"]]
    },
    "Read Processed Sheet": {
      "main": [["Filter Non-Blank Emails"]]
    },
    "Filter Non-Blank Emails": {
      "main": [["Process Emails"]]
    },
    "Process Emails": {
      "main": [["Detect Patterns"]]
    },
    "Detect Patterns": {
      "main": [["Write Non-Blank Processed"]]
    },
    "Write Non-Blank Processed": {
      "main": [["Guess Emails"]]
    },
    "Guess Emails": {
      "main": [["Write Final Output"]]
    }
  },
  "settings": {
    "timezone": "UTC",
    "saveExecutionProgress": true
  },
  "notes": "Instructions: POST to /webhook/upload-contacts with form-data: 'sourceFile' (Excel with contacts), 'targetFile' (Excel for LinkedIn comparison), and column names (e.g., sourceLinkedinCol, finalEmailCol)."
}
